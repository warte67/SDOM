// SDOM_Version.hpp.in
#pragma once

// -----------------------------------------------------------------------------
//  Auto-generated file: Do not edit manually
//  Generated by scripts/gen_version.sh or CMake at build time
// -----------------------------------------------------------------------------

#define SDOM_VERSION_MAJOR 0
#define SDOM_VERSION_MINOR 5
#define SDOM_VERSION_PATCH 107
#define SDOM_VERSION_CODENAME "early pre-alpha"
#define SDOM_VERSION_BUILD "2025-10-29_13:17:03_d09b775c"

// Additional build metadata
#define SDOM_VERSION_BUILD_DATE "2025-10-29_13:17:03"
#define SDOM_VERSION_COMMIT "d09b775c"
#define SDOM_BUILD_BRANCH "master"
#define SDOM_BUILD_COMPILER "g++ (GCC) 15.2.1 20250813"
#define SDOM_BUILD_PLATFORM "Linux-x86_64"

#include <string>
#include <cstdio>
#include <sol/sol.hpp>

namespace SDOM {

class Version {
public:
    Version(sol::state_view lua) { registerLuaBindings(lua); }
    ~Version() = default;

    // ----------------------------------------------------------
    //  C++ accessors
    // ----------------------------------------------------------
    std::string toString() const {
        char buf[64];
        snprintf(buf, sizeof(buf), "%d.%d.%d",
                 SDOM_VERSION_MAJOR, SDOM_VERSION_MINOR, SDOM_VERSION_PATCH);
        return std::string(buf);
    }

    std::string fullString() const {
        char buf[256];
        snprintf(buf, sizeof(buf),
            "v%d.%d.%d (%s, built %s, %s, %s, %s)",
            SDOM_VERSION_MAJOR,
            SDOM_VERSION_MINOR,
            SDOM_VERSION_PATCH,
            SDOM_VERSION_CODENAME,
            SDOM_VERSION_BUILD_DATE,
            SDOM_BUILD_PLATFORM,
            SDOM_BUILD_COMPILER,
            SDOM_VERSION_COMMIT
        );
        return std::string(buf);
    }

    int getMajor() const { return SDOM_VERSION_MAJOR; }
    int getMinor() const { return SDOM_VERSION_MINOR; }
    int getPatch() const { return SDOM_VERSION_PATCH; }

    std::string getCodename() const { return SDOM_VERSION_CODENAME; }
    std::string getBuild() const { return SDOM_VERSION_BUILD; }
    std::string getBuildDate() const { return SDOM_VERSION_BUILD_DATE; }
    std::string getCommit() const { return SDOM_VERSION_COMMIT; }
    std::string getBranch() const { return SDOM_BUILD_BRANCH; }
    std::string getCompiler() const { return SDOM_BUILD_COMPILER; }
    std::string getPlatform() const { return SDOM_BUILD_PLATFORM; }

    // ----------------------------------------------------------
    //  Lua exposure
    // ----------------------------------------------------------
    void registerLuaBindings(sol::state_view lua) {
        sol::table t = lua.create_table_with(
            "major", getMajor(),
            "minor", getMinor(),
            "patch", getPatch(),
            "codename", getCodename(),
            "build", getBuild(),
            "build_date", getBuildDate(),
            "commit", getCommit(),
            "branch", getBranch(),
            "compiler", getCompiler(),
            "platform", getPlatform()
        );

        t.set_function("toString", [&]() { return toString(); });
        t.set_function("fullString", [&]() { return fullString(); });

        // Allow colon syntax (e.g., Version:toString())
        sol::table meta = lua.create_table();
        meta["__index"] = t;
        t[sol::metatable_key] = meta;

        lua["Version"] = t;
    }
};

} // namespace SDOM
